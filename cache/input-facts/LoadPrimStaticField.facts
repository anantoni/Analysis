  <java.lang.ThreadLocal: int nextHashCode>, <java.lang.ThreadLocal: int nextHashCode()>
  <java.lang.SecurityManager: boolean packageAccessValid>, <java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>
  <java.lang.SecurityManager: boolean packageDefinitionValid>, <java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>
  <java.lang.reflect.Proxy: long nextUniqueNumber>, <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>
  <java.net.SocketPermission: boolean trustProxy>, <java.net.SocketPermission: boolean impliesIgnoreMask(java.net.SocketPermission)>
  <java.io.BufferedReader: int defaultExpectedLineLength>, <java.io.BufferedReader: java.lang.String readLine(boolean)>
  <java.lang.Shutdown: int state>, <java.lang.Shutdown: void add(java.lang.Thread)>
  <java.lang.Shutdown: int state>, <java.lang.Shutdown: boolean remove(java.lang.Thread)>
  <java.lang.Shutdown: boolean runFinalizersOnExit>, <java.lang.Shutdown: void sequence()>
  <java.lang.Shutdown: int state>, <java.lang.Shutdown: void sequence()>
  <java.lang.Shutdown: boolean runFinalizersOnExit>, <java.lang.Shutdown: void exit(int)>
  <java.lang.Shutdown: int state>, <java.lang.Shutdown: void exit(int)>
  <java.lang.Shutdown: int state>, <java.lang.Shutdown: void shutdown()>
  <java.io.File: char separatorChar>, <sun.misc.URLClassPath$FileLoader: sun.misc.Resource getResource(java.lang.String,boolean)>
  <java.io.File: char separatorChar>, <sun.security.provider.PolicyFile: void initPolicyFile()>
  <java.io.File: char separatorChar>, <sun.security.provider.PolicyFile: java.security.CodeSource canonicalizeCodebase(java.security.CodeSource,boolean)>
  <java.io.File: char separatorChar>, <java.net.URLClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
  <java.io.File: char separatorChar>, <sun.security.provider.PolicyParser: java.lang.String getKeyStoreUrl()>
  <java.io.File: char separatorChar>, <sun.security.provider.PolicyParser: sun.security.provider.PolicyParser$GrantEntry parseGrantEntry()>
  <java.io.File: char separatorChar>, <sun.misc.PathPermissions$1: java.lang.Object run()>
  <sun.net.www.protocol.http.HttpURLConnection: int maxRedirects>, <sun.net.www.protocol.http.HttpURLConnection: java.io.InputStream getInputStream()>
  <java.io.File: char separatorChar>, <sun.net.www.protocol.file.FileURLConnection: void connect()>
  <java.io.File: char separatorChar>, <java.lang.Runtime: void loadLibrary0(java.lang.Class,java.lang.String)>
  <sun.net.InetAddressCachePolicy: int cachePolicy>, <sun.net.InetAddressCachePolicy: void setIfNotSet(int)>
  <sun.net.InetAddressCachePolicy: boolean set>, <sun.net.InetAddressCachePolicy: void setIfNotSet(int)>
  <java.util.Date: int defaultCenturyStart>, <java.util.Date: long parse(java.lang.String)>
  <java.io.File: char separatorChar>, <sun.misc.URLClassPath$FileLoader: void <init>(java.net.URL)>
  <java.io.File: char separatorChar>, <sun.misc.URLClassPath$JarLoader: java.util.jar.JarFile getJarFile(java.net.URL)>
  <java.io.File: char separatorChar>, <sun.security.util.PropertyExpander: java.lang.String expand(java.lang.String)>
  <sun.net.ftp.FtpClient: int FTP_SUCCESS>, <sun.net.ftp.FtpClient: void issueCommandCheck(java.lang.String)>
  <sun.net.ftp.FtpClient: int FTP_SUCCESS>, <sun.net.ftp.FtpClient: int readReply()>
  <sun.net.ftp.FtpClient: int FTP_ERROR>, <sun.net.ftp.FtpClient: int readReply()>
  <sun.net.ftp.FtpClient: int FTP_ERROR>, <sun.net.ftp.FtpClient: java.net.Socket openDataConnection(java.lang.String)>
  <sun.net.ftp.FtpClient: int FTP_ERROR>, <sun.net.ftp.FtpClient: void openServer(java.lang.String,int)>
  <sun.net.ftp.FtpClient: int FTP_ERROR>, <sun.net.ftp.FtpClient: void login(java.lang.String,java.lang.String)>
  <java.lang.Double: double MIN_VALUE>, <java.lang.FloatingDecimal: double doubleValue()>
  <java.lang.FloatingDecimal: int maxSmallTen>, <java.lang.FloatingDecimal: double doubleValue()>
  <java.lang.FloatingDecimal: int singleMaxSmallTen>, <java.lang.FloatingDecimal: float floatValue()>
  <java.io.BufferedInputStream: int defaultBufferSize>, <java.io.BufferedInputStream: void <init>(java.io.InputStream)>
  <java.io.BufferedWriter: int defaultCharBufferSize>, <java.io.BufferedWriter: void <init>(java.io.Writer)>
  <java.lang.ref.SoftReference: long clock>, <java.lang.ref.SoftReference: void <init>(java.lang.Object)>
  <java.lang.ref.SoftReference: long clock>, <java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
  <java.lang.ref.SoftReference: long clock>, <java.lang.ref.SoftReference: java.lang.Object get()>
  <java.io.File: char separatorChar>, <java.io.FilePermission: boolean impliesIgnoreMask(java.io.FilePermission)>
  <java.io.File: char separatorChar>, <java.io.File: java.lang.String getName()>
  <java.io.File: char separatorChar>, <java.io.File: java.lang.String getParent()>
  <java.io.File: char separatorChar>, <java.io.File: java.net.URL toURL()>
  <java.io.File: char separatorChar>, <java.io.File: void writeObject(java.io.ObjectOutputStream)>
  <java.io.File: char separatorChar>, <java.io.File: void readObject(java.io.ObjectInputStream)>
  <java.net.URLConnection: boolean defaultAllowUserInteraction>, <java.net.URLConnection: void <init>(java.net.URL)>
  <java.net.URLConnection: boolean defaultUseCaches>, <java.net.URLConnection: void <init>(java.net.URL)>
  <java.net.URLConnection: boolean defaultUseCaches>, <java.net.URLConnection: boolean getDefaultUseCaches()>
  <java.io.BufferedReader: int defaultCharBufferSize>, <java.io.BufferedReader: void <init>(java.io.Reader)>
  <java.net.HttpURLConnection: boolean followRedirects>, <java.net.HttpURLConnection: void <init>(java.net.URL)>
  <java.text.Normalizer: int maximumCanonical>, <java.text.Normalizer: void <init>(java.text.CharacterIterator,int)>
  <java.lang.ClassLoader: boolean sclSet>, <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
  <java.io.File: char separatorChar>, <java.text.resources.LocaleData: java.lang.String[] getClassList(java.lang.String,java.lang.String)>
  <java.io.File: char pathSeparatorChar>, <java.text.resources.LocaleData: void <clinit>()>
  <java.io.File: int counter>, <java.io.File: java.io.File generateFile(java.lang.String,java.lang.String,java.io.File)>
  <java.io.File: char separatorChar>, <java.io.File: void <clinit>()>
  <java.io.File: char pathSeparatorChar>, <java.io.File: void <clinit>()>
  <java.security.AccessControlContext: boolean debugInit>, <java.security.AccessControlContext: sun.security.util.Debug getDebug()>
  <java.net.URLConnection: boolean fileNameMapLoaded>, <java.net.URLConnection: java.net.FileNameMap getFileNameMap()>
  <java.security.Security: boolean reloadProviders>, <java.security.Security: void reloadProviders()>
  <java.text.Normalizer: int maximumCanonical>, <java.text.Normalizer: void decompose(java.lang.StringBuffer,int)>
  <java.text.Normalizer: int maximumCanonical>, <java.text.Normalizer: java.lang.String decompose(java.lang.String,int)>
  <java.text.Normalizer: char minimumCombining>, <java.text.Normalizer: void <clinit>()>
  <java.lang.Thread: int threadInitNumber>, <java.lang.Thread: int nextThreadNum()>
  <sun.misc.SoftCache$ValueCell: int dropped>, <sun.misc.SoftCache$ValueCell: void drop()>
  <sun.misc.SoftCache$ValueCell: int dropped>, <sun.misc.SoftCache$ValueCell: int access$210()>
  <sun.security.x509.AlgorithmId: boolean initOidTable>, <sun.security.x509.AlgorithmId: sun.security.util.ObjectIdentifier algOID(java.lang.String)>
  <sun.net.www.http.KeepAliveCache: int result>, <sun.net.www.http.KeepAliveCache: int getMaxConnections()>
  <java.lang.Double: double MIN_VALUE>, <java.lang.FloatingDecimal: double ulp(double,boolean)>
  <sun.misc.ProxyGenerator: boolean saveGeneratedFiles>, <sun.misc.ProxyGenerator: byte[] generateProxyClass(java.lang.String,java.lang.Class[])>
  <sun.net.InetAddressCachePolicy: int cachePolicy>, <sun.net.InetAddressCachePolicy: int get()>
  <java.io.File: char separatorChar>, <sun.security.provider.IdentityDatabase: java.io.File systemDatabaseFile()>
  <sun.net.www.protocol.jar.URLJarFile: int BUF_SIZE>, <sun.net.www.protocol.jar.URLJarFile: int access$000()>
  <java.text.Normalizer: int maximumDecomposition>, <java.text.Normalizer: int access$000()>
  <java.text.Normalizer: int maximumCanonical>, <java.text.Normalizer: int access$100()>
  <java.lang.Math: long negativeZeroFloatBits>, <java.lang.Math: float max(float,float)>
  <java.lang.Math: long negativeZeroDoubleBits>, <java.lang.Math: double max(double,double)>
  <java.lang.Math: long negativeZeroFloatBits>, <java.lang.Math: float min(float,float)>
  <java.lang.Math: long negativeZeroDoubleBits>, <java.lang.Math: double min(double,double)>
  <java.lang.StrictMath: long negativeZeroFloatBits>, <java.lang.StrictMath: float max(float,float)>
  <java.lang.StrictMath: long negativeZeroDoubleBits>, <java.lang.StrictMath: double max(double,double)>
  <java.lang.StrictMath: long negativeZeroFloatBits>, <java.lang.StrictMath: float min(float,float)>
  <java.lang.StrictMath: long negativeZeroDoubleBits>, <java.lang.StrictMath: double min(double,double)>
  <java.text.DigitList: double LOG10>, <java.text.DigitList: int log10(double)>
  <java.io.File: char separatorChar>, <sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String)>
  <java.io.File: char separatorChar>, <sun.net.www.protocol.file.FileURLConnection: java.security.Permission getPermission()>
  <java.io.File: char separatorChar>, <sun.security.provider.PolicyFile: java.io.InputStream getInputStream(java.net.URL)>
  <java.io.File: char separatorChar>, <sun.misc.JarIndex: void parseJars(java.lang.String[])>
  <sun.net.ftp.FtpClient: int FTP_TRY_AGAIN>, <sun.net.ftp.FtpClient: int issueCommand(java.lang.String)>
  <sun.net.ftp.FtpClient: int FTP_ERROR>, <sun.net.ftp.FtpClient: int issueCommand(java.lang.String)>
  <sun.net.www.protocol.ftp.FtpDirectoryThread: int imageWidth>, <sun.net.www.protocol.ftp.FtpDirectoryThread: void addImage(java.lang.String)>
  <sun.net.www.protocol.ftp.FtpDirectoryThread: int imageHeight>, <sun.net.www.protocol.ftp.FtpDirectoryThread: void addImage(java.lang.String)>
  <java.io.File: char separatorChar>, <sun.net.www.protocol.file.Handler: void parseURL(java.net.URL,java.lang.String,int,int)>
  <java.net.URLConnection: boolean defaultAllowUserInteraction>, <java.net.URLConnection: boolean getDefaultAllowUserInteraction()>
  <sun.misc.VM: boolean suspended>, <sun.misc.VM: boolean threadsSuspended()>
  <java.net.HttpURLConnection: boolean followRedirects>, <java.net.HttpURLConnection: boolean getFollowRedirects()>
  <java.text.Normalizer: int maximumDecomposition>, <java.text.Normalizer: int getMaximumDecomposition()>
